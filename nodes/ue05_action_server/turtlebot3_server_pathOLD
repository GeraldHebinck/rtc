#!/usr/bin/env python3
# ################################################################################
# edited WHS, OJ , 3.12.2020 #
# usage
#    $1 roslaunch turtlebot3_gazebo turtlebot3_empty_world.launch
#    $2 rosrun rtc turtlebot3_server_path
#    $3 rosrun rtc turtlebot3_client_path

import rospy
import actionlib
from TurtleBotClassFile import TurtleBotClass
import turtlebot3_example.msg

class Turtlebot3Action(object):
    _feedback = turtlebot3_example.msg.Turtlebot3ActionFeedback()
    _result = turtlebot3_example.msg.Turtlebot3ActionResult()

    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, turtlebot3_example.msg.Turtlebot3Action,
                                                execute_cb=self.execute_cb, auto_start=False)
        self.stats_sub = rospy.Subscriber('joint_states', JointState, self.get_state)
        self.odom_sub = rospy.Subscriber('odom', Odometry, self.get_odom)
        self.init_stats = True
        self._as.start()
        # rospy.loginfo('Server On')
        rospy.loginfo('Turtlebot_Path_Server is on service')

    def execute_cb(self, goal):
        myTurtle.goal.x = goal[0]
        myTurtle.goal.y = goal[1]

        rospy.loginfo('Turtlebot send to goal %d' % goal[2])

        # Ziel erreicht => True
        while not myTurtle.move2goal():
            pass

        self._result = 0
        rospy.loginfo('%s: Succeeded' % self._action_name)
        self._as.set_succeeded(self._result)


if __name__ == '__main__':
    myTurtle = TurtleBotClass()
    # rospy.init_node('turtlebot3')
    # server = Turtlebot_Path_Server(rospy.get_name())
    rospy.init_node('turtlebot3')
    server = Turtlebot3Action(rospy.get_name())
    rospy.spin()
